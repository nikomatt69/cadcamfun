---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
Guida Implementativa: Sistema Plugin Web Extension API per CAD/CAM FUN Introduzione Questa guida dettagliata illustra l'implementazione di un sistema di plugin professionale basato sul modello Web Extension API, simile a quello utilizzato da VSCode. L'architettura proposta consente un'integrazione profonda mantenendo al contempo un adeguato isolamento di sicurezza. Architettura Generale Il sistema di plugin sarà composto da questi elementi fondamentali: Plugin Host: Runtime isolato per l'esecuzione dei plugin Plugin API Bridge: Sistema di comunicazione bidirezionale tra host e plugin Plugin Registry: Database e gestore del lifecycle dei plugin UI Integration Framework: Sistema per integrare UI dei plugin nell'applicazione Security Sandbox: Modello di isolamento e permessi Developer SDK: Strumenti per gli sviluppatori di plugin Plugin Marketplace: Sistema di distribuzione e installazione Struttura delle Directory /src /plugins /core /host plugin-host.ts # Host principale per i plugin plugin-bridge.ts # Bridge di comunicazione sandbox.ts # Gestione sandbox di sicurezza worker-host.ts # Implementazione host WebWorker iframe-host.ts # Implementazione host IFrame /registry plugin-registry.ts # Gestione plugin installati plugin-manifest.ts # Validazione manifesti plugin-lifecycle.ts # Gestione ciclo di vita plugin-storage.ts # Storage persistente per plugin /api index.ts # Esportazione API completa model-api.ts # API operazioni sul modello ui-api.ts # API UI ed eventi file-api.ts # API file system network-api.ts # API richieste di rete capabilities.ts # Sistema di permessi /messaging message-bus.ts # Sistema messaggistica interna message-serializer.ts # Serializzazione messaggi sicura rpc-handler.ts # Gestione chiamate procedura remota /ui /components PluginManagerView.tsx # Vista gestione plugin PluginSidebar.tsx # Sidebar per UI plugin PluginHostContainer.tsx # Container per host plugin PluginToolbarButton.tsx # Pulsante toolbar /dialogs InstallPluginDialog.tsx # Dialog installazione PluginSettingsDialog.tsx # Dialog impostazioni /hooks usePluginRegistry.ts # Hook accesso registry usePluginMessaging.ts # Hook messaggistica /sdk /templates plugin-template.ts # Template plugin manifest-template.json # Template manifest tsconfig.json # Configurazione TypeScript webpack.config.js # Configurazione build /testing plugin-test-harness.ts # Ambiente test plugin /types cadcam-plugin-api.d.ts # Definizioni tipi API plugin-manifest.d.ts # Definizione manifest /marketplace marketplace-api.ts # API marketplace plugin-installer.ts # Sistema installazione plugin-updater.ts # Sistema aggiornamento /examples basic-plugin # Plugin esempio base measurement-plugin # Plugin misurazione /pages /plugin-manager.tsx # Pagina gestione plugin /api/plugins # API endpoints per plugin /[...plugin-api].ts # Routing API plugin /marketplace.ts # Endpoint marketplace /types plugin-system.d.ts # Tipi sistema plugin Fase 1: Fondamenta del Sistema Plugin 1.1 Plugin Registry Il Plugin Registry è il cuore del sistema e mantiene i metadati di tutti i plugin installati. Struttura: plugin-registry.ts: Gestisce la lista dei plugin, loro stato e configurazione plugin-manifest.ts: Schema e validazione dei manifest dei plugin plugin-lifecycle.ts: Gestione del ciclo di vita (installazione, attivazione, ecc.) plugin-storage.ts: Storage per le configurazioni e dati persistenti dei plugin Funzionalità chiave: CRUD completo per i plugin installati Validazione dei manifest Gestione delle dipendenze tra plugin Storage persistente delle configurazioni Tracking delle versioni e aggiornamenti 1.2 Plugin Host e Bridge di Comunicazione Questi componenti gestiscono l'esecuzione isolata dei plugin e la comunicazione sicura. Struttura: plugin-host.ts: Ambiente di esecuzione per i plugin plugin-bridge.ts: Bridge di comunicazione bidirezionale worker-host.ts: Implementazione basata su WebWorker iframe-host.ts: Implementazione basata su iFrame Funzionalità chiave: Caricamento dinamico del codice plugin Isolamento del contesto di esecuzione Meccanismo di serializzazione sicura per i messaggi RPC (Remote Procedure Call) bidirezionale Gestione errori e crash dei plugin 1.3 Sistema di Messaggistica Sistema che permette la comunicazione sicura tra host e plugin. Struttura: message-bus.ts: Bus centrale per i messaggi message-serializer.ts: Serializzatore/deserializzatore messaggi rpc-handler.ts: Gestione delle chiamate remote Funzionalità chiave: Canali di messaggistica tipizzati Serializzazione sicura di oggetti complessi Sequencing e tracking dei messaggi Sistema Promise-based per chiamate RPC Gestione timeout e recupero errori Fase 2: API e Sistema di Permessi 2.1 API Core L'API esposta ai plugin per interagire con il CAD. Struttura: model-api.ts: API per manipolare il modello CAD ui-api.ts: API per interagire con l'UI file-api.ts: API per operazioni su file network-api.ts: API per richieste di rete Funzionalità chiave: Accesso in lettura/scrittura al modello CAD Gestione selezioni e vista Operazioni su file con permessi Richieste HTTP con permessi Eventi UI e sistema di callback 2.2 Sistema di Permessi (Capabilities) Implementazione di un modello di sicurezza basato su permessi. Struttura: capabilities.ts: Definizione e gestione permessi Integrazione con il manifest dei plugin Funzionalità chiave: Permessi granulari (lettura/scrittura modello, file, rete, ecc.) Richiesta dinamica di permessi Revoca di permessi Validazione durante l'installazione Notifiche all'utente per richieste di permessi sensibili Fase 3: Integrazione UI 3.1 Componenti UI Principali Componenti React per integrare i plugin nell'interfaccia utente. Struttura: PluginSidebar.tsx: Sidebar per le UI dei plugin PluginToolbarButton.tsx: Pulsante nella toolbar del CAD PluginHostContainer.tsx: Container per il rendering UI plugin Funzionalità chiave: Rendering isolato delle UI dei plugin Sistema di tab per navigare tra i plugin Gestione dello stato della sidebar (aperta/chiusa) Integrazione con il tema dell'applicazione Comunicazione bidirezionale con il plugin 3.2 Manager dei Plugin Interfaccia per gestire i plugin installati. Struttura: PluginManagerView.tsx: Vista principale del gestore plugin InstallPluginDialog.tsx: Dialog per installazione PluginSettingsDialog.tsx: Dialog per configurazioni Funzionalità chiave: Lista dei plugin installati con dettagli Attivazione/disattivazione plugin Installazione/disinstallazione Configurazione plugin Visualizzazione log errori Fase 4: SDK per Sviluppatori 4.1 TypeScript Definitions Definizioni TypeScript per l'API plugin. Struttura: cadcam-plugin-api.d.ts: Definizioni complete API plugin-manifest.d.ts: Schema del manifest Funzionalità chiave: Tipi completi per l'API Intellisense per sviluppatori Validazione durante lo sviluppo 4.2 Strumenti di Sviluppo Tools per lo sviluppo di plugin. Struttura: Template di plugin standard Configurazione build con webpack Ambiente di test Funzionalità chiave: Template di progetto CLI per la generazione di plugin Testing framework Validazione manifest Fase 5: Marketplace e Distribuzione 5.1 API Marketplace API per il discovery e distribuzione di plugin. Struttura: marketplace-api.ts: Client per marketplace online plugin-installer.ts: Installazione pacchetti plugin-updater.ts: Sistema di aggiornamento Funzionalità chiave: Ricerca plugin Download e installazione Verifica di integrità e sicurezza Aggiornamenti automatici Rating e recensioni 5.2 Plugin Package Format Definizione del formato dei pacchetti plugin. Struttura: Schema del formato pacchetto Sistema di versioning Funzionalità chiave: Format ZIP con firma digitale Verifica delle dipendenze Metadati per marketplace Supporto per risorse multiple Piano di Implementazione Dettagliato Fase 1: Fondamenta e Infrastruttura Base (3-4 settimane) Settimana 1-2: Plugin Registry e Storage Implementazione classe PluginRegistry Definizione e validazione schema manifest Sistema di storage persistente Test unitari Settimana 3-4: Plugin Host e Messaging Implementazione host base (Worker/iFrame) Sistema di messaggistica RPC Meccanismi di serializzazione sicura Gestione errori e crash recovery Test integrazione Fase 2: API Core e Permessi (4-5 settimane) Settimana 1-2: API Core Definizione completa API CAD/modello Implementazione API UI Sistema eventi e callback Test unitari API Settimana 3-5: Sistema Permessi e Sandbox Definizione modello permissions Implementazione validatori UI per gestione permessi Integrazione con host Validatore manifest Test di sicurezza Fase 3: Integrazione UI (3 settimane) Settimana 1: Componenti UI Base Implementazione PluginSidebar Integrazione toolbar button Sistema visualizzazione plugin attivi Settimana 2-3: Manager Plugin Implementazione vista gestione plugin Dialog installazione e configurazione Preview plugin Sistema attivazione/disattivazione Test usabilità Fase 4: SDK e Documentazione (3 settimane) Settimana 1-2: SDK Sviluppatori Definizioni TypeScript complete Template progetto Configurazione build CLI per sviluppo Settimana 3: Documentazione e Plugin Esempio Documentazione API completa Plugin esempio semplice Plugin esempio avanzato Tutorial sviluppo plugin Riferimento API Fase 5: Marketplace e Deployment (3-4 settimane) Settimana 1-2: Sistema Marketplace API client marketplace Sistema di installazione pacchetti Verifica integrità e sicurezza Sistema aggiornamenti Settimana 3-4: Finalizzazione e Deployment Test end-to-end Performance optimization Risoluzione bug Documentazione finale Release e deployment Schema Manifest Plugin Il manifest è un file JSON che definisce metadati e capacità del plugin: json{ "id": "com.example.measure-tools", "name": "Measurement Tools", "version": "1.0.0", "description": "Advanced measurement tools for CAD models", "author": "Example Corp", "repository": "https://github.com/example/measure-tools", "license": "MIT", "icon": "icon.png", "main": "dist/main.js", "engines": { "cadcam": "^1.0.0" }, "permissions": [ "model:read", "model:selection", "ui:sidebar", "storage:local" ], "contributes": { "sidebar": { "title": "Measurements", "icon": "ruler-icon.svg", "entry": "dist/sidebar.js" }, "commands": [ { "id": "measure.distance", "title": "Measure Distance", "icon": "distance-icon.svg", "keybinding": "ctrl+shift+m" } ], "menus": { "contextMenu": [ { "command": "measure.distance", "when": "selectionCount >= 2" } ] } }, "dependencies": { "other-plugin": "^2.0.0" }, "configuration": { "properties": { "precision": { "type": "number", "default": 2, "description": "Number of decimal places for measurements" } } } } Dettagli Tecnici Implementativi Isolamento e Sicurezza Il sistema utilizzerà diverse strategie di isolamento: WebWorkers: Per plugin che eseguono calcoli intensivi senza UI Pro: Completo isolamento del thread di esecuzione Contro: Accesso limitato alle API DOM iFrames con sandbox: Per plugin con UI Pro: Isolamento DOM e risorse Contro: Overhead performance Content Security Policy (CSP): Limitazioni per risorse caricate Restrizioni su script esterni Controllo connessioni WebSocket Prevenzione XSS Comunicazione Bidirezionale Il sistema utilizzerà un pattern RPC basato su messaggi: Messaggistica Tipizzata: Uso di TypeScript per tipizzazione messaggi Promise-based API: API asincrone con supporto Promise Streaming: Supporto per stream di dati per operazioni lunghe Event System: Sistema di sottoscrizione eventi Esempio di pattern comunicazione: typescript// Dal plugin all'host await cadApi.model.getEntities({ type: 'line' }); // Dall'host al plugin (via eventi) cadApi.events.onSelectionChanged(selection => { // Reagisci al cambio selezione }); Plugin Lifecycle Ogni plugin attraversa questi stati: Installed: Plugin installato ma non caricato Loaded: Codice caricato in memoria Activated: Plugin inizializzato e attivo Deactivated: Plugin temporaneamente disattivato Uninstalled: Plugin rimosso dal sistema Con hooks per ogni transizione di stato: onInstall onLoad onActivate onDeactivate onUninstall Estensibilità UI Il sistema supporterà estensione UI in punti specifici: Sidebar: Panel dedicati con UI custom Toolbar: Pulsanti e menu Context Menu: Voci di menu contestuali Property Panel: Campi custom nei pannelli proprietà View Overlay: Elementi UI sovrapposti al canvas Con API React per renderizzare componenti UI isolati. Considerazioni su Performance e Scalabilità Lazy Loading I plugin saranno caricati solo quando necessario: Plugin Package: Download solo quando richiesto Code Splitting: Caricamento moduli plugin su richiesta Dynamic Import: Caricamento codice condizionale Stato e Persistenza Il sistema garantirà persistenza efficiente: Plugin Settings: Salvataggio configurazioni Plugin State: Stato workspace tra sessioni Local Storage: Storage dedicato per plugin Backend Storage: Sincronizzazione cloud optional Conclusione Questa guida fornisce un piano dettagliato per l'implementazione di un sistema plugin Web Extension API completo e professionale per l'applicazione CAD/CAM FUN. L'architettura proposta offre un equilibrio ottimale tra potenza delle funzionalità, sicurezza e facilità di sviluppo plugin. Il piano di implementazione incrementale consente di costruire il sistema progressivamente, testando e validando ogni componente prima di procedere alla fase successiva. La documentazione e gli strumenti per gli sviluppatori garantiranno un'adozione rapida da parte della community. Procedendo con questa implementazione, l'applicazione CAD/CAM FUN otterrà un ecosistema plugin estremamente potente e scalabile, aprendo nuove possibilità di estensione e personalizzazione similmente a piattaforme mature come VSCode.

/src
  /plugins
    /core
      /host
        plugin-host.ts         # Host principale per i plugin
        plugin-bridge.ts       # Bridge di comunicazione
        sandbox.ts             # Gestione sandbox di sicurezza
        worker-host.ts         # Implementazione host WebWorker
        iframe-host.ts         # Implementazione host IFrame
      /registry
        plugin-registry.ts     # Gestione plugin installati
        plugin-manifest.ts     # Validazione manifesti
        plugin-lifecycle.ts    # Gestione ciclo di vita
        plugin-storage.ts      # Storage persistente per plugin
      /api
        index.ts               # Esportazione API completa
        model-api.ts           # API operazioni sul modello
        ui-api.ts              # API UI ed eventi
        file-api.ts            # API file system
        network-api.ts         # API richieste di rete
        capabilities.ts        # Sistema di permessi
      /messaging
        message-bus.ts         # Sistema messaggistica interna
        message-serializer.ts  # Serializzazione messaggi sicura
        rpc-handler.ts         # Gestione chiamate procedura remota
    /ui
      /components
        PluginManagerView.tsx   # Vista gestione plugin
        PluginSidebar.tsx       # Sidebar per UI plugin
        PluginHostContainer.tsx # Container per host plugin
        PluginToolbarButton.tsx # Pulsante toolbar
      /dialogs
        InstallPluginDialog.tsx # Dialog installazione
        PluginSettingsDialog.tsx # Dialog impostazioni
      /hooks
        usePluginRegistry.ts    # Hook accesso registry
        usePluginMessaging.ts   # Hook messaggistica
    /sdk
      /templates
        plugin-template.ts      # Template plugin
        manifest-template.json  # Template manifest
        tsconfig.json           # Configurazione TypeScript
        webpack.config.js       # Configurazione build
      /testing
        plugin-test-harness.ts  # Ambiente test plugin
      /types
        cadcam-plugin-api.d.ts  # Definizioni tipi API
        plugin-manifest.d.ts    # Definizione manifest
    /marketplace
      marketplace-api.ts        # API marketplace
      plugin-installer.ts       # Sistema installazione
      plugin-updater.ts         # Sistema aggiornamento
    /examples
      basic-plugin             # Plugin esempio base
      measurement-plugin       # Plugin misurazione
  /pages
    /plugin-manager.tsx         # Pagina gestione plugin
    /api/plugins               # API endpoints per plugin
      /[...plugin-api].ts       # Routing API plugin
      /marketplace.ts           # Endpoint marketplace
  /types
    plugin-system.d.ts          # Tipi sistema plugin




